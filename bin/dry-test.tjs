#!/usr/local/bin/node
"use strict"

var _ = require('dry-underscore');
var cwd = _.path.cwd();
var tamejs = require('tamejs');
var verbose = false;

function acatch(err){ throw(err); }

function rawFiles(args, callback){

    if(args.length){ return callback(args); }

    function prune(dir){ return(dir == 'node_modules'); }
    
    _.time('tests.find');
    await{ _.fs.find(cwd, { pattern: "*.test.tjs",  prune : prune }, _.plumb(defer(var tameFiles), acatch)); }
    await{ _.fs.find(cwd, { pattern: "*.test.js",  prune : prune }, _.plumb(defer(var testFiles), acatch)); }
    _.time('tests.find', verbose);

    return callback(tameFiles.concat(testFiles));
}
 
function processedFiles(files){
    var processedFiles = [];

    _.time('tests.compile');
    _.each(files, function(file){
        if(_.path.extension.is(file, ".tjs")){
            var source = tamejs.getCompiledFileSync(file);
            var compiledFilePath = _.path.hide(_.path.extension(file, "js"));
            _.fs.writeFile(compiledFilePath, source);
            processedFiles.push(compiledFilePath);
        }else{ processedFiles.push(file); }
    });
    _.time('tests.compile', verbose);

    return(processedFiles);
}

exports.run = function(){

    var args = process.argv;
    
    // drop node
    args.shift();
    var scriptName = args.shift();
    if(args[0] == '-v'){ 
        verbose = true;
        args.shift();
    }

    // await{ _.fs.readFile("./mocha.args", _.plumb(defer(var err, mochaArgs), _.ecode.noEnt)); }
    // if(err){ mochaArgs = "--reporter dot --ui qunit"; }
    
    var mochaArgs = "--reporter dot --ui qunit";

    await{ rawFiles(args, defer(var files)); }
        
    var displayFiles = _.map(files, function(f){ return(_.path.normalize(_.path.relative(cwd, f))); });

    var runFiles = processedFiles(files);

    if(!runFiles.length){ return _.stdout("No test files found."); }

    // mocha --require should --reporter dot --ui bdd
    var cmd = "./node_modules/mocha/bin/mocha" + " " + mochaArgs + " " + runFiles.join(" "); 

    _.stdout("running files: ", displayFiles);

    _.shell(cmd);
};

